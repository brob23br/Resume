
[
  {
    "id": "lab-001",
    "week": 1,
    "title": "Lambda Fundamentals & Event Sources",
    "domain": "development",
    "services": ["lambda", "cloudwatch"],
    "difficulty": "Beginner",
    "estimatedTime": "2-3 hours",
    "description": "Master AWS Lambda fundamentals with event-driven architecture patterns. Create functions, configure triggers, and monitor execution.",
    "costWarning": "Free Tier eligible",
    "objectives": [
      "Create and configure Lambda functions using both Console and CLI",
      "Set up event source mappings with S3, API Gateway, and CloudWatch Events",
      "Understand execution context, cold starts, and performance optimization",
      "Implement error handling and retry logic",
      "Monitor function performance with CloudWatch metrics"
    ],
    "theory": "AWS Lambda is a serverless compute service that runs code in response to events. It automatically manages compute resources and scales based on incoming requests. Key concepts include execution context reuse, cold starts, concurrency limits, and event source mappings that connect Lambda to other AWS services.",
    "prerequisites": [
      "AWS account with appropriate permissions",
      "Basic understanding of Python or Node.js",
      "AWS CLI configured with credentials",
      "Text editor or IDE for code development"
    ],
    "consoleSteps": [
      "Sign in to the AWS Management Console and navigate to the Lambda service dashboard.",
      "Click 'Create function'.",
      "Select 'Author from scratch'.",
      "Enter 'MyFirstLambda' as the function name.",
      "For Runtime, select 'Python 3.9'.",
      "Under Permissions, choose 'Create a new role with basic Lambda permissions'.",
      "Click 'Create function' at the bottom of the page.",
      "In the function code editor, replace the default code with a Python function that logs the event input (e.g., print(event)).",
      "Click 'Deploy' to save your changes.",
      "Click 'Test', then 'Configure test event'. Enter a sample JSON payload and save the event.",
      "Click 'Test' again to invoke the function and verify the output in the console.",
      "In the 'Function overview' panel, click 'Add trigger'.",
      "Select 'S3' as the trigger type, choose an existing S3 bucket, and configure the event type (e.g., 'All object create events').",
      "Click 'Add' to attach the trigger.",
      "Scroll down to 'Environment variables' and add a key-value pair (e.g., KEY=VALUE).",
      "Set the function timeout to 30 seconds under 'General configuration' > 'Edit'.",
      "Click 'Save'.",
      "Upload a file to the S3 bucket to trigger the Lambda function.",
      "Navigate to the CloudWatch service, select 'Log groups', and find '/aws/lambda/MyFirstLambda'.",
      "Open the latest log stream to review execution logs and analyze patterns."
    ],
    "cliCommands": [
      {
        "description": "Create a Lambda function deployment package. Ensure your 'lambda_function.py' file is in your working directory.",
        "command": "zip function.zip lambda_function.py"
      },
      {
        "description": "Create a new IAM role for Lambda with basic execution permissions (if not already created). Save the trust policy as 'trust-policy.json'.",
        "command": "aws iam create-role --role-name lambda-role --assume-role-policy-document file://trust-policy.json"
      },
      {
        "description": "Attach the AWSLambdaBasicExecutionRole policy to your new role.",
        "command": "aws iam attach-role-policy --role-name lambda-role --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      },
      {
        "description": "Create the Lambda function using the deployment package and IAM role. Replace ACCOUNT with your AWS account ID.",
        "command": "aws lambda create-function --function-name MyFirstLambda --runtime python3.9 --role arn:aws:iam::ACCOUNT:role/lambda-role --handler lambda_function.lambda_handler --zip-file fileb://function.zip"
      },
      {
        "description": "Add an S3 trigger to the Lambda function (replace BUCKET_NAME with your bucket).",
        "command": "aws lambda create-event-source-mapping --event-source-arn arn:aws:s3:::BUCKET_NAME --function-name MyFirstLambda --enabled"
      },
      {
        "description": "Invoke the Lambda function with a test payload and save the output to 'response.json'.",
        "command": "aws lambda invoke --function-name MyFirstLambda --payload '{\"test\": \"data\"}' response.json"
      },
      {
        "description": "Update the function code after making changes. Create a new zip file (e.g., 'updated-function.zip').",
        "command": "aws lambda update-function-code --function-name MyFirstLambda --zip-file fileb://updated-function.zip"
      },
      {
        "description": "List CloudWatch log groups to find logs for your Lambda function.",
        "command": "aws logs describe-log-groups --log-group-name-prefix /aws/lambda/MyFirstLambda"
      },
      {
        "description": "Retrieve the latest log events for your Lambda function.",
        "command": "aws logs filter-log-events --log-group-name /aws/lambda/MyFirstLambda"
      }
    ],
    "cleanup": [
      "Delete Lambda function from console or via CLI: aws lambda delete-function --function-name MyFirstLambda",
      "Remove associated IAM roles if created specifically for this lab",
      "Delete CloudWatch log groups: aws logs delete-log-group --log-group-name /aws/lambda/MyFirstLambda",
      "Remove any S3 triggers or event configurations"
    ],
    "documentation": [
      {
        "title": "AWS Lambda Developer Guide",
        "url": "https://docs.aws.amazon.com/lambda/latest/dg/"
      },
      {
        "title": "Lambda Event Source Mappings",
        "url": "https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventsourcemapping.html"
      },
      {
        "title": "Lambda Best Practices",
        "url": "https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html"
      }
    ]
  },
  {
    "id": "lab-002",
    "week": 2,
    "title": "DynamoDB with Lambda Integration",
    "domain": "development",
    "services": ["lambda", "dynamodb", "iam"],
    "difficulty": "Intermediate",
    "estimatedTime": "3-4 hours",
    "description": "Build a serverless data processing pipeline with DynamoDB streams and Lambda triggers. Learn NoSQL data modeling and optimization strategies.",
    "costWarning": "Free Tier eligible - 25GB storage, 25 read/write capacity units",
    "objectives": [
      "Create DynamoDB tables with appropriate partition and sort keys",
      "Configure DynamoDB Streams and Lambda triggers",
      "Implement CRUD operations using boto3 and proper error handling",
      "Understand eventual consistency vs strong consistency",
      "Optimize queries using Global Secondary Indexes (GSI)",
      "Implement conditional writes and optimistic locking"
    ],
    "theory": "DynamoDB is a NoSQL database service offering consistent performance at scale. Key concepts include partition keys for data distribution, sort keys for sorting within partitions, Global Secondary Indexes for alternate query patterns, and DynamoDB Streams for change data capture.",
    "prerequisites": [
      "Completed Lab 001 (Lambda Fundamentals)",
      "Understanding of NoSQL concepts",
      "Python boto3 library knowledge",
      "JSON data format familiarity"
    ],
    "consoleSteps": [
      "Sign in to the AWS Management Console and navigate to the DynamoDB service.",
      "Click 'Create table'.",
      "Enter 'UserProfiles' as the table name and 'userId' as the partition key (type: String). Leave sort key blank for now.",
      "Under 'Table settings', enable DynamoDB Streams and select 'NEW_AND_OLD_IMAGES' as the stream view type.",
      "Click 'Create table' to finish setup.",
      "Navigate to the Lambda service and click 'Create function'.",
      "Select 'Author from scratch', name the function 'ProcessUserChanges', and choose Python 3.9 as the runtime.",
      "Create or select an IAM role with DynamoDB read/write and CloudWatch logging permissions.",
      "In the Lambda code editor, write a handler to process DynamoDB stream events and log the event data.",
      "Deploy the function and configure the DynamoDB stream as a trigger for the Lambda function.",
      "In DynamoDB, add a new item to the 'UserProfiles' table using the console's 'Explore table items' feature.",
      "Check CloudWatch logs for the Lambda function to verify it processed the stream event.",
      "In the DynamoDB table, click 'Indexes' and create a Global Secondary Index (GSI) on the 'email' attribute.",
      "Use the console's query feature to run queries on both the main table and the GSI.",
      "Test updating and deleting items to observe stream events and Lambda triggers."
    ],
    "cliCommands": [
      {
        "description": "Create the DynamoDB table with streams enabled. Replace region/account as needed.",
        "command": "aws dynamodb create-table --table-name UserProfiles --attribute-definitions AttributeName=userId,AttributeType=S --key-schema AttributeName=userId,KeyType=HASH --billing-mode PAY_PER_REQUEST --stream-specification StreamEnabled=true,StreamViewType=NEW_AND_OLD_IMAGES"
      },
      {
        "description": "Add an item to the table. Modify the values as needed for your test.",
        "command": "aws dynamodb put-item --table-name UserProfiles --item '{\"userId\":{\"S\":\"user123\"},\"name\":{\"S\":\"John Doe\"},\"email\":{\"S\":\"john@example.com\"}}'"
      },
      {
        "description": "Query the table for a specific userId.",
        "command": "aws dynamodb query --table-name UserProfiles --key-condition-expression 'userId = :uid' --expression-attribute-values '{\":uid\":{\"S\":\"user123\"}}'"
      },
      {
        "description": "Create a Lambda function deployment package for stream processing (zip your handler file).",
        "command": "zip process_user_changes.zip lambda_function.py"
      },
      {
        "description": "Create the Lambda function for processing DynamoDB streams. Replace ACCOUNT with your AWS account ID.",
        "command": "aws lambda create-function --function-name ProcessUserChanges --runtime python3.9 --role arn:aws:iam::ACCOUNT:role/lambda-role --handler lambda_function.lambda_handler --zip-file fileb://process_user_changes.zip"
      },
      {
        "description": "Get the DynamoDB stream ARN for the table.",
        "command": "aws dynamodb describe-table --table-name UserProfiles --query 'Table.LatestStreamArn' --output text"
      },
      {
        "description": "Create an event source mapping between the DynamoDB stream and the Lambda function. Replace the ARN and function name as needed.",
        "command": "aws lambda create-event-source-mapping --event-source-arn <stream-arn> --function-name ProcessUserChanges --starting-position TRIM_HORIZON"
      },
      {
        "description": "Create a Global Secondary Index (GSI) on the 'email' attribute.",
  "command": "aws dynamodb update-table --table-name UserProfiles --attribute-definitions AttributeName=email,AttributeType=S --global-secondary-index-updates '[{\"Create\":{\"IndexName\":\"email-index\",\"KeySchema\":[{\"AttributeName\":\"email\",\"KeyType\":\"HASH\"}],\"Projection\":{\"ProjectionType\":\"ALL\"},\"ProvisionedThroughput\":{\"ReadCapacityUnits\":5,\"WriteCapacityUnits\":5}}}]'"
      },
      {
        "description": "Query the GSI for a specific email address.",
        "command": "aws dynamodb query --table-name UserProfiles --index-name email-index --key-condition-expression 'email = :e' --expression-attribute-values '{\":e\":{\"S\":\"john@example.com\"}}'"
      },
      {
        "description": "Check CloudWatch logs for Lambda execution.",
        "command": "aws logs filter-log-events --log-group-name /aws/lambda/ProcessUserChanges"
      }
    ],
    "cleanup": [
      "Delete DynamoDB table: aws dynamodb delete-table --table-name UserProfiles",
      "Delete Lambda function and associated IAM roles",
      "Remove event source mapping: aws lambda delete-event-source-mapping --uuid <mapping-uuid>",
      "Delete CloudWatch log groups"
    ],
    "documentation": [
      {
        "title": "DynamoDB Developer Guide",
        "url": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/"
      },
      {
        "title": "DynamoDB Streams",
        "url": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html"
      },
      {
        "title": "Best Practices for DynamoDB",
        "url": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/best-practices.html"
      }
    ]
  },
  {
    "id": "lab-003",
    "week": 3,
    "title": "API Gateway + Lambda REST API",
    "domain": "development",
    "services": ["api-gateway", "lambda", "iam"],
    "difficulty": "Intermediate",
    "estimatedTime": "3-4 hours",
    "description": "Build a complete serverless REST API with API Gateway and Lambda. Implement authentication, request validation, and error handling.",
    "costWarning": "Free Tier: 1 million API calls per month",
    "objectives": [
      "Create REST API with API Gateway and Lambda integration",
      "Implement HTTP methods (GET, POST, PUT, DELETE)",
      "Configure request/response transformations",
      "Set up API authentication and authorization",
      "Implement request validation and error handling",
      "Configure CORS for web applications",
      "Deploy API to different stages (dev, prod)"
    ],
    "theory": "API Gateway acts as a front door for REST APIs, providing features like request routing, authentication, rate limiting, and request/response transformation. Integration with Lambda enables serverless API development with automatic scaling.",
    "prerequisites": [
      "Completed Lab 001 and Lab 002",
      "Understanding of REST API principles",
      "Knowledge of HTTP methods and status codes",
      "Basic understanding of JSON and API design"
    ],
    "consoleSteps": [
      "Sign in to the AWS Management Console and open the API Gateway service.",
      "Click 'Create API' and select 'REST API'.",
      "Enter a name (e.g., 'UserAPI') and description, then click 'Create API'.",
      "In the Resources panel, click 'Actions' > 'Create Resource'. Enter '/users' as the resource path and create it.",
      "With '/users' selected, click 'Actions' > 'Create Method' and choose 'GET'.",
      "Select 'Lambda Function' as the integration type, check 'Use Lambda Proxy integration', and enter the Lambda function name. Click 'Save'.",
      "Repeat the previous step to add a 'POST' method for '/users'.",
      "For each method, click 'Method Request' and configure request validation using a JSON schema if needed.",
      "Click 'Actions' > 'Enable CORS' for the '/users' resource and confirm the settings.",
      "(Optional) Under 'Authorizers', create a new Cognito or Lambda authorizer and attach it to the methods.",
      "Click 'Actions' > 'Deploy API', create a new stage called 'dev', and deploy.",
      "Test the endpoints using the 'Invoke URL' provided for the 'dev' stage.",
      "(Optional) Set up a custom domain name for your API.",
      "Navigate to CloudWatch to monitor API metrics and logs."
    ],
    "cliCommands": [
      {
        "description": "Create a new REST API.",
        "command": "aws apigateway create-rest-api --name 'UserAPI' --description 'User management API'"
      },
      {
        "description": "Get the root resource ID for the API.",
        "command": "aws apigateway get-resources --rest-api-id <api-id> --query 'items[?path==`/`].id' --output text"
      },
      {
        "description": "Create a '/users' resource under the root resource.",
        "command": "aws apigateway create-resource --rest-api-id <api-id> --parent-id <root-id> --path-part users"
      },
      {
        "description": "Create a GET method for '/users'.",
        "command": "aws apigateway put-method --rest-api-id <api-id> --resource-id <resource-id> --http-method GET --authorization-type NONE"
      },
      {
        "description": "Set up Lambda integration for the GET method. Replace <lambda-arn> as needed.",
        "command": "aws apigateway put-integration --rest-api-id <api-id> --resource-id <resource-id> --http-method GET --type AWS_PROXY --integration-http-method POST --uri arn:aws:apigateway:<region>:lambda:path/2015-03-31/functions/<lambda-arn>/invocations"
      },
      {
        "description": "Repeat steps 4-5 for the POST method.",
        "command": "...existing code..."
      },
      {
        "description": "Deploy the API to the 'dev' stage.",
        "command": "aws apigateway create-deployment --rest-api-id <api-id> --stage-name dev"
      },
      {
        "description": "Enable CORS for the '/users' resource (can also be done via console).",
        "command": "...existing code..."
      },
      {
        "description": "Monitor API logs in CloudWatch.",
        "command": "aws logs filter-log-events --log-group-name /aws/apigateway/UserAPI"
      }
    ],
    "cleanup": [
      "Delete API Gateway REST API: aws apigateway delete-rest-api --rest-api-id <api-id>",
      "Delete associated Lambda functions",
      "Remove IAM roles and policies",
      "Delete CloudWatch log groups"
    ],
    "documentation": [
      {
        "title": "API Gateway Developer Guide",
        "url": "https://docs.aws.amazon.com/apigateway/latest/developerguide/"
      },
      {
        "title": "API Gateway Lambda Integration",
        "url": "https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-integrations.html"
      },
      {
        "title": "API Gateway CORS",
        "url": "https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html"
      }
    ]
  },
  {
    "id": "lab-004",
    "week": 4,
    "title": "S3 Event Processing with Lambda",
    "domain": "development",
    "services": ["s3", "lambda", "sns"],
    "difficulty": "Beginner",
    "estimatedTime": "2-3 hours",
    "description": "Process S3 object events with Lambda functions. Implement image resizing, file validation, and notification workflows.",
    "costWarning": "Free Tier eligible - 5GB S3 storage, Lambda execution included",
    "objectives": [
      "Configure S3 event notifications for Lambda triggers",
      "Process different S3 event types (PUT, DELETE, COPY)",
      "Implement file validation and metadata extraction",
      "Create image processing pipeline with Lambda layers",
      "Set up SNS notifications for processing results",
      "Handle large files with S3 multipart upload events"
    ],
    "theory": "S3 event notifications enable real-time processing of object operations. Lambda can automatically trigger on object creation, deletion, or modification, enabling serverless data processing pipelines.",
    "prerequisites": [
      "Completed Lab 001 (Lambda Fundamentals)",
      "Basic understanding of S3 object storage",
      "Knowledge of Python image processing libraries (optional)",
      "Understanding of event-driven architecture"
    ],
    "consoleSteps": [
      "Open the S3 service in the AWS Console.",
      "Click 'Create bucket', enter a unique name (e.g., 'my-processing-bucket'), and enable versioning.",
      "Complete the bucket creation wizard with default settings.",
      "Go to the Lambda service and click 'Create function'.",
      "Select 'Author from scratch', name the function 'ProcessS3Objects', and choose Python 3.9 as the runtime.",
      "Assign an IAM role with S3 read permissions and CloudWatch logging.",
      "In the Lambda code editor, write code to process S3 events and validate file types and sizes.",
      "Deploy the function and add an S3 trigger for 'PUT' events from your bucket.",
      "Upload a test file to the S3 bucket using the console.",
      "Check CloudWatch logs for Lambda execution details.",
      "In the SNS service, create a new topic for notifications.",
      "Add SNS publish permissions to the Lambda execution role.",
      "Update the Lambda code to publish success/failure notifications to the SNS topic.",
      "Test with different file types and sizes, and monitor error rates in CloudWatch."
    ],
    "cliCommands": [
      {
        "description": "Create an S3 bucket with a unique name.",
        "command": "aws s3 mb s3://my-processing-bucket-unique-name"
      },
      {
        "description": "Enable versioning on the bucket.",
        "command": "aws s3api put-bucket-versioning --bucket my-processing-bucket-unique-name --versioning-configuration Status=Enabled"
      },
      {
        "description": "Upload a test file to the bucket.",
        "command": "aws s3 cp testfile.jpg s3://my-processing-bucket-unique-name/"
      },
      {
        "description": "Create a Lambda function deployment package for S3 event processing.",
        "command": "zip process_s3_objects.zip lambda_function.py"
      },
      {
        "description": "Create the Lambda function with S3 read permissions.",
        "command": "aws lambda create-function --function-name ProcessS3Objects --runtime python3.9 --role arn:aws:iam::ACCOUNT:role/lambda-role --handler lambda_function.lambda_handler --zip-file fileb://process_s3_objects.zip"
      },
      {
        "description": "Create a notification configuration JSON file (notification.json) to trigger Lambda on 'PUT' events.",
        "command": "...existing code..."
      },
      {
        "description": "Apply the notification configuration to the bucket.",
        "command": "aws s3api put-bucket-notification-configuration --bucket my-processing-bucket-unique-name --notification-configuration file://notification.json"
      },
      {
        "description": "Create an SNS topic for notifications.",
        "command": "aws sns create-topic --name processing-results"
      },
      {
        "description": "Publish a test notification to the SNS topic.",
        "command": "aws sns publish --topic-arn arn:aws:sns:region:account:processing-results --message 'Test notification'"
      },
      {
        "description": "List Lambda function invocations in CloudWatch logs.",
        "command": "aws logs filter-log-events --log-group-name /aws/lambda/ProcessS3Objects --start-time $(date -d '1 hour ago' +%s)000"
      }
    ],
    "cleanup": [
      "Empty S3 bucket: aws s3 rm s3://my-processing-bucket-unique-name --recursive",
      "Delete S3 bucket: aws s3 rb s3://my-processing-bucket-unique-name",
      "Delete Lambda function and IAM roles",
      "Delete SNS topic if created",
      "Remove CloudWatch log groups"
    ],
    "documentation": [
      {
        "title": "S3 Event Notifications",
        "url": "https://docs.aws.amazon.com/AmazonS3/latest/userguide/NotificationHowTo.html"
      },
      {
        "title": "Lambda S3 Tutorial",
        "url": "https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example.html"
      },
      {
        "title": "S3 Developer Guide",
        "url": "https://docs.aws.amazon.com/AmazonS3/latest/userguide/"
      }
    ]
  },
  {
    "id": "lab-005",
    "week": 5,
    "title": "Cognito Authentication & Authorization",
    "domain": "security",
    "services": ["cognito", "api-gateway", "lambda"],
    "difficulty": "Intermediate",
    "estimatedTime": "4-5 hours",
    "description": "Implement comprehensive user authentication with Cognito User Pools and Identity Pools. Secure API access with JWT tokens.",
    "costWarning": "Free Tier: 50,000 MAUs (Monthly Active Users)",
    "objectives": [
      "Create Cognito User Pool with custom attributes and policies",
      "Configure User Pool App Client with appropriate settings",
      "Implement user registration, confirmation, and sign-in flows",
      "Set up Identity Pool for AWS resource access",
      "Integrate Cognito authorizer with API Gateway",
      "Validate JWT tokens in Lambda functions",
      "Implement role-based access control (RBAC)"
    ],
    "theory": "Amazon Cognito provides user identity and access management for web and mobile apps. User Pools handle user authentication and JWT token generation, while Identity Pools provide AWS credentials for authenticated users to access AWS services.",
    "prerequisites": [
      "Completed Lab 003 (API Gateway + Lambda)",
      "Understanding of JWT tokens and OAuth 2.0 concepts",
      "Basic knowledge of user authentication flows",
      "Familiarity with IAM roles and policies"
    ],
    "consoleSteps": [
      "Open the Cognito service in the AWS Console.",
      "Click 'Create user pool', enter a name, and enable email verification.",
      "Set password policy (minimum length, uppercase, numbers, etc.) and enable MFA if required.",
      "Add custom attributes such as 'department' or 'role'.",
      "Create the user pool and note the Pool ID.",
      "Under 'App clients', create a new app client with 'ALLOW_USER_PASSWORD_AUTH' enabled.",
      "Create a Cognito Identity Pool and link it to the User Pool and App Client.",
      "Configure IAM roles for authenticated and unauthenticated users.",
      "In API Gateway, create a new Cognito Authorizer and link it to your API methods.",
      "Register a test user in the User Pool and confirm the email.",
      "Test user sign-in and obtain a JWT token.",
      "Call a protected API endpoint using the JWT token to verify authorization."
    ],
    "cliCommands": [
      {
        "description": "Create a Cognito User Pool with a password policy.",
        "command": "aws cognito-idp create-user-pool --pool-name MyUserPool --policies '{\"PasswordPolicy\":{\"MinimumLength\":8,\"RequireUppercase\":true,\"RequireLowercase\":true,\"RequireNumbers\":true}}'"
      },
      {
        "description": "Add custom attributes to the user pool (if needed, via console or CLI).",
        "command": "...existing code..."
      },
      {
        "description": "Create a User Pool App Client with password authentication enabled.",
        "command": "aws cognito-idp create-user-pool-client --user-pool-id <pool-id> --client-name MyAppClient --explicit-auth-flows ALLOW_USER_PASSWORD_AUTH"
      },
      {
        "description": "Create a Cognito Identity Pool and link it to the User Pool (use console or CLI).",
        "command": "...existing code..."
      },
      {
        "description": "Register a new user in the User Pool.",
        "command": "aws cognito-idp admin-create-user --user-pool-id <pool-id> --username testuser --user-attributes Name=email,Value=test@example.com --temporary-password TempPass123!"
      },
      {
        "description": "Confirm the user registration (user must set a new password).",
        "command": "...existing code..."
      },
      {
        "description": "Initiate authentication for the user.",
        "command": "aws cognito-idp admin-initiate-auth --user-pool-id <pool-id> --client-id <client-id> --auth-flow ADMIN_NO_SRP_AUTH --auth-parameters USERNAME=testuser,PASSWORD=NewPass123!"
      },
      {
        "description": "Use the JWT token to call a protected API endpoint (use curl or Postman).",
        "command": "...existing code..."
      }
    ],
    "cleanup": [
      "Delete Cognito Identity Pool",
      "Delete Cognito User Pool: aws cognito-idp delete-user-pool --user-pool-id <pool-id>",
      "Remove IAM roles created for Cognito",
      "Update API Gateway to remove Cognito authorizer",
      "Clean up test users and associated resources"
    ],
    "documentation": [
      {
        "title": "Cognito User Pools",
        "url": "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html"
      },
      {
        "title": "Cognito Identity Pools",
        "url": "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html"
      },
      {
        "title": "API Gateway Cognito Authorization",
        "url": "https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html"
      }
    ]
  },
  {
    "id": "lab-006",
    "week": 6,
    "title": "IAM Roles & Policies for Developers",
    "domain": "security",
    "services": ["iam", "lambda", "s3"],
    "difficulty": "Intermediate",
    "estimatedTime": "3-4 hours",
    "description": "Master IAM security best practices for application development. Implement least privilege access and cross-service permissions.",
    "costWarning": "Free Tier eligible - IAM has no additional charges",
    "objectives": [
      "Create IAM roles following least privilege principle",
      "Implement resource-based and identity-based policies",
      "Configure cross-service access patterns securely",
      "Use IAM policy conditions for enhanced security",
      "Implement AWS STS for temporary credentials",
      "Test and validate IAM permissions",
      "Debug common IAM permission issues"
    ],
    "theory": "IAM controls access to AWS resources through users, roles, and policies. Identity-based policies attach to IAM identities, while resource-based policies attach to resources. Least privilege principle ensures users and services have only necessary permissions.",
    "prerequisites": [
      "Understanding of AWS services and permissions",
      "Knowledge of JSON policy document structure",
      "Familiarity with AWS CLI and console operations",
      "Basic security concepts and best practices"
    ],
    "consoleSteps": [
      "Open the IAM service in the AWS Console.",
      "Click 'Roles' > 'Create role'.",
      "Select 'Lambda' as the trusted entity and proceed.",
      "Attach the AWS managed policy 'AWSLambdaBasicExecutionRole'.",
      "Create a custom policy for S3 bucket access (specify allowed actions and resources).",
      "Attach the custom policy to the role.",
      "Use the IAM Policy Simulator to test the role's permissions for various actions.",
      "Add policy conditions (e.g., restrict by IP or time) as needed.",
      "(Optional) Create a cross-account access role and configure trust relationships.",
      "Review CloudTrail logs to verify access patterns and troubleshoot issues.",
      "Use IAM Access Analyzer to identify and remediate overly permissive policies."
    ],
    "cliCommands": [
      {
        "description": "Create a trust policy JSON file (trust-policy.json) for Lambda execution.",
        "command": "...existing code..."
      },
      {
        "description": "Create the IAM role for Lambda using the trust policy.",
        "command": "aws iam create-role --role-name LambdaS3Role --assume-role-policy-document file://trust-policy.json"
      },
      {
        "description": "Create a custom S3 access policy (s3-policy.json) specifying allowed actions and resources.",
        "command": "...existing code..."
      },
      {
        "description": "Create the custom policy in IAM.",
        "command": "aws iam create-policy --policy-name S3BucketAccess --policy-document file://s3-policy.json"
      },
      {
        "description": "Attach the custom policy to the Lambda role.",
        "command": "aws iam attach-role-policy --role-name LambdaS3Role --policy-arn arn:aws:iam::account:policy/S3BucketAccess"
      },
      {
        "description": "Test the role's permissions using the IAM Policy Simulator.",
        "command": "aws iam simulate-principal-policy --policy-source-arn arn:aws:iam::account:role/LambdaS3Role --action-names s3:GetObject --resource-arns arn:aws:s3:::my-bucket/*"
      },
      {
        "description": "(Optional) Add policy conditions for enhanced security (edit the policy JSON).",
        "command": "...existing code..."
      }
    ],
    "cleanup": [
      "Detach policies from roles",
      "Delete custom IAM policies: aws iam delete-policy --policy-arn <policy-arn>",
      "Delete IAM roles: aws iam delete-role --role-name LambdaS3Role",
      "Remove any test resources created during lab",
      "Review and clean up unused IAM entities"
    ],
    "documentation": [
      {
        "title": "IAM User Guide",
        "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/"
      },
      {
        "title": "IAM Best Practices",
        "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html"
      },
      {
        "title": "IAM Policy Language",
        "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_grammar.html"
      }
    ]
  },
  {
    "id": "lab-007",
    "week": 7,
    "title": "Secrets Manager & Parameter Store",
    "domain": "security",
    "services": ["secrets-manager", "parameter-store", "lambda"],
    "difficulty": "Intermediate",
    "estimatedTime": "2-3 hours",
    "description": "Secure application configuration and secrets management using AWS Secrets Manager and Systems Manager Parameter Store.",
    "costWarning": "Secrets Manager: $0.40 per secret per month, Parameter Store advanced: $0.05 per 10K requests",
    "objectives": [
      "Store and retrieve database credentials with Secrets Manager",
      "Implement automatic secret rotation",
      "Use Parameter Store for application configuration",
      "Configure parameter hierarchies and access patterns",
      "Implement secure secrets access in Lambda functions",
      "Compare standard vs advanced Parameter Store features",
      "Set up cross-region secret replication (optional)"
    ],
    "theory": "AWS Secrets Manager provides secure storage and automatic rotation for sensitive data like database credentials. Parameter Store offers hierarchical storage for configuration data with optional encryption and versioning.",
    "prerequisites": [
      "Understanding of application configuration management",
      "Knowledge of encryption and key management concepts",
      "Experience with Lambda functions and IAM permissions",
      "Basic database administration concepts"
    ],
    "consoleSteps": [
      "Open the Secrets Manager service in the AWS Console.",
      "Click 'Store a new secret', select 'Other type of secret', and enter database credentials as key-value pairs.",
      "Name the secret (e.g., 'prod/myapp/db') and add a description.",
      "(Optional) Enable automatic rotation for an RDS database.",
      "Complete the wizard to create the secret.",
      "Open the Systems Manager Parameter Store and click 'Create parameter'.",
      "Enter a name (e.g., '/myapp/prod/api-key'), value, and select 'SecureString' as the type.",
      "Organize parameters using a hierarchy (e.g., /myapp/prod/database/host).",
      "Create a Lambda function to retrieve secrets and parameters using the Boto3 SDK.",
      "Assign an IAM role to the Lambda function with permissions for Secrets Manager and Parameter Store.",
      "Test parameter versioning by updating a parameter and retrieving previous versions.",
      "Implement parameter caching in the Lambda code for efficiency."
    ],
    "cliCommands": [
      {
        "description": "Create a new secret in Secrets Manager for database credentials.",
        "command": "aws secretsmanager create-secret --name prod/myapp/db --description 'Database credentials' --secret-string '{\"username\":\"admin\",\"password\":\"secure123\"}'"
      },
      {
        "description": "Retrieve the secret value from Secrets Manager.",
        "command": "aws secretsmanager get-secret-value --secret-id prod/myapp/db --query SecretString --output text"
      },
      {
        "description": "Create a secure parameter in Parameter Store.",
        "command": "aws ssm put-parameter --name '/myapp/prod/api-key' --value 'secret-api-key' --type SecureString --description 'API key for external service'"
      },
      {
        "description": "Retrieve the parameter value with decryption.",
        "command": "aws ssm get-parameter --name '/myapp/prod/api-key' --with-decryption"
      },
      {
        "description": "Retrieve all parameters under a path recursively.",
        "command": "aws ssm get-parameters-by-path --path '/myapp/prod' --recursive --with-decryption"
      },
      {
        "description": "Update a parameter value and check versioning.",
        "command": "aws ssm put-parameter --name '/myapp/prod/api-key' --value 'new-api-key' --type SecureString --overwrite"
      }
    ],
    "cleanup": [
      "Delete secrets: aws secretsmanager delete-secret --secret-id prod/myapp/db --force-delete-without-recovery",
      "Delete parameters: aws ssm delete-parameter --name '/myapp/prod/api-key'",
      "Remove IAM policies and roles",
      "Clean up Lambda functions and associated resources"
    ],
    "documentation": [
      {
        "title": "Secrets Manager User Guide",
        "url": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/"
      },
      {
        "title": "Parameter Store User Guide",
        "url": "https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html"
      },
      {
        "title": "Managing Secrets in Lambda",
        "url": "https://docs.aws.amazon.com/lambda/latest/dg/configuration-secrets.html"
      }
    ]
  },
  {
    "id": "lab-008",
    "week": 8,
    "title": "CloudFormation & SAM Deployment",
    "domain": "deployment",
    "services": ["cloudformation", "sam", "lambda"],
    "difficulty": "Advanced",
    "estimatedTime": "4-5 hours",
    "description": "Infrastructure as Code with CloudFormation and AWS SAM. Deploy serverless applications with proper resource management and rollback capabilities.",
    "costWarning": "Free Tier eligible for CloudFormation operations and Lambda deployments",
    "objectives": [
      "Create CloudFormation templates with parameters and outputs",
      "Build SAM applications with local development and testing",
      "Implement proper resource dependencies and rollback strategies",
      "Use CloudFormation nested stacks and stack sets",
      "Deploy Lambda functions with SAM CLI",
      "Implement blue-green deployments with SAM",
      "Configure environment-specific parameters"
    ],
    "theory": "Infrastructure as Code (IaC) enables repeatable, version-controlled infrastructure deployments. CloudFormation provides AWS-native IaC, while SAM extends it for serverless applications with simplified syntax and local development capabilities.",
    "prerequisites": [
      "Completed multiple previous labs for AWS service knowledge",
      "Understanding of YAML/JSON syntax",
      "Basic DevOps and deployment concepts",
      "SAM CLI installed locally"
    ],
    "consoleSteps": [
      "Install the AWS SAM CLI on your local machine and verify installation with 'sam --version'.",
      "Open a terminal and run 'sam init' to initialize a new SAM application. Choose Python 3.9 and the 'hello-world' template.",
      "Review the generated 'template.yaml' file and understand the resources defined.",
      "Implement your Lambda function code in the project directory.",
      "Add an API Gateway event to the Lambda function in the template.yaml if not present.",
      "Test the application locally using 'sam local start-api' and send requests to the local endpoint.",
      "Build the application with 'sam build'.",
      "Deploy the application to AWS using 'sam deploy --guided' and follow the prompts.",
      "In the CloudFormation console, review the created stack and its resources.",
      "Test stack rollback by introducing a template error and attempting an update.",
      "Explore nested stacks and stack sets if needed for complex deployments."
    ],
    "cliCommands": [
      {
        "description": "Initialize a new SAM application with the hello-world template.",
        "command": "sam init --runtime python3.9 --architecture x86_64 --app-template hello-world --name sam-demo-app"
      },
      {
        "description": "Build the SAM application.",
        "command": "sam build"
      },
      {
        "description": "Test the application locally using the SAM CLI.",
        "command": "sam local start-api"
      },
      {
        "description": "Deploy the SAM application to AWS with guided prompts.",
        "command": "sam deploy --guided"
      },
      {
        "description": "Validate the CloudFormation template before deployment.",
        "command": "aws cloudformation validate-template --template-body file://template.yaml"
      },
      {
        "description": "Delete the SAM stack after testing.",
        "command": "sam delete"
      }
    ],
    "cleanup": [
      "Delete SAM stack: sam delete or aws cloudformation delete-stack --stack-name <stack-name>",
      "Remove S3 deployment bucket if created",
      "Clean up any associated IAM roles",
      "Delete CloudWatch log groups"
    ],
    "documentation": [
      {
        "title": "AWS SAM Developer Guide",
        "url": "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/"
      },
      {
        "title": "CloudFormation User Guide",
        "url": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/"
      },
      {
        "title": "SAM CLI Reference",
        "url": "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-command-reference.html"
      }
    ]
  },
  {
    "id": "lab-009",
    "week": 9,
    "title": "CI/CD with CodePipeline & Lambda",
    "domain": "deployment",
    "services": ["codepipeline", "codebuild", "codedeploy", "lambda"],
    "difficulty": "Advanced",
    "estimatedTime": "4-5 hours",
    "description": "Build complete CI/CD pipeline for serverless applications with automated testing, deployment, and rollback capabilities.",
    "costWarning": "CodePipeline: $1/month per active pipeline, CodeBuild: $0.005/build minute",
    "objectives": [
      "Create CodeCommit repository with Lambda source code",
      "Build CodeBuild project with automated testing",
      "Configure CodePipeline with source, build, and deploy stages",
      "Implement CodeDeploy for Lambda with traffic shifting",
      "Set up automated testing and quality gates",
      "Configure pipeline notifications and monitoring",
      "Implement rollback strategies for failed deployments"
    ],
    "theory": "CI/CD pipelines automate code integration, testing, and deployment. AWS Developer Tools provide native integration for serverless applications with capabilities for automated testing, gradual deployments, and monitoring.",
    "prerequisites": [
      "Completed Lab 008 (CloudFormation & SAM)",
      "Understanding of Git version control",
      "Knowledge of automated testing concepts",
      "Experience with Lambda deployments"
    ],
    "consoleSteps": [
      "Open the CodeCommit service in the AWS Console and create a new repository (e.g., 'lambda-cicd-demo').",
      "Clone the repository to your local machine using the provided HTTPS or SSH URL.",
      "Add your Lambda application code and a 'buildspec.yml' file to the repo.",
      "Commit and push the code to CodeCommit.",
      "Open the CodeBuild service and create a new build project. Select CodeCommit as the source and Python as the runtime.",
      "Configure the build environment, specify the buildspec file, and assign an appropriate IAM service role.",
      "Open CodePipeline and create a new pipeline with three stages: Source (CodeCommit), Build (CodeBuild), and Deploy (Lambda/CloudFormation).",
      "Set up a CodeDeploy application for Lambda and configure deployment settings (traffic shifting, etc.).",
      "Make a code change, push to CodeCommit, and observe the pipeline execution.",
      "Monitor deployment status and logs in CodePipeline and CloudWatch."
    ],
    "cliCommands": [
      {
        "description": "Create a new CodeCommit repository for your Lambda project.",
        "command": "aws codecommit create-repository --repository-name lambda-cicd-demo --repository-description 'Demo repo for Lambda CI/CD'"
      },
      {
        "description": "Clone the repository to your local machine.",
        "command": "git clone https://git-codecommit.region.amazonaws.com/v1/repos/lambda-cicd-demo"
      },
      {
        "description": "Create a CodeBuild project with CodeCommit as the source and S3 as the artifact location.",
        "command": "aws codebuild create-project --name lambda-build-project --source type=CODECOMMIT,location=https://git-codecommit.region.amazonaws.com/v1/repos/lambda-cicd-demo --artifacts type=S3,location=my-build-bucket --environment type=LINUX_CONTAINER,image=aws/codebuild/standard:5.0,computeType=BUILD_GENERAL1_SMALL --service-role arn:aws:iam::account:role/CodeBuildServiceRole"
      },
      {
        "description": "Create a CodePipeline with source, build, and deploy stages.",
        "command": "aws codepipeline create-pipeline --cli-input-json file://pipeline-definition.json"
      },
      {
        "description": "Start a pipeline execution to test the setup.",
        "command": "aws codepipeline start-pipeline-execution --name lambda-pipeline"
      },
      {
        "description": "Monitor pipeline execution and view logs in CloudWatch.",
        "command": "...existing code..."
      }
    ],
    "cleanup": [
      "Delete CodePipeline: aws codepipeline delete-pipeline --name lambda-pipeline",
      "Delete CodeBuild project: aws codebuild delete-project --name lambda-build-project",
      "Delete CodeCommit repository: aws codecommit delete-repository --repository-name lambda-cicd-demo",
      "Clean up S3 artifacts bucket",
      "Remove IAM roles and policies"
    ],
    "documentation": [
      {
        "title": "CodePipeline User Guide",
        "url": "https://docs.aws.amazon.com/codepipeline/latest/userguide/"
      },
      {
        "title": "CodeBuild User Guide",
        "url": "https://docs.aws.amazon.com/codebuild/latest/userguide/"
      },
      {
        "title": "Lambda CI/CD Best Practices",
        "url": "https://docs.aws.amazon.com/lambda/latest/dg/lambda-cicd.html"
      }
    ]
  },
  {
    "id": "lab-010",
    "week": 10,
    "title": "Elastic Beanstalk Application Deployment",
    "domain": "deployment",
    "services": ["elastic-beanstalk", "ec2", "cloudwatch"],
    "difficulty": "Beginner",
    "estimatedTime": "2-3 hours",
    "description": "Deploy and manage web applications with Elastic Beanstalk. Learn application versioning, environment management, and auto-scaling.",
    "costWarning": "EC2 instances charges apply - use t3.micro for free tier eligibility",
    "objectives": [
      "Deploy web application to Elastic Beanstalk",
      "Configure application versions and environments",
      "Set up auto-scaling and load balancing",
      "Implement blue-green deployments",
      "Configure environment variables and application settings",
      "Monitor application health and performance",
      "Implement logging and debugging strategies"
    ],
    "theory": "Elastic Beanstalk simplifies application deployment by handling infrastructure provisioning, load balancing, auto-scaling, and monitoring. It supports multiple deployment strategies and provides easy management of application versions.",
    "prerequisites": [
      "Basic web application development knowledge",
      "Understanding of EC2 and load balancing concepts",
      "Sample web application code (Python Flask, Node.js, or Java)",
      "EB CLI installed (optional but recommended)"
    ],
    "consoleSteps": [
      "Open the Elastic Beanstalk service in the AWS Console.",
      "Click 'Create Application', enter a name and description.",
      "Upload your sample application code as a zip file.",
      "Select the platform (e.g., Python 3.9) and instance type (t3.micro for free tier).",
      "Review configuration settings and launch the environment.",
      "Wait for the environment to be ready, then test the application URL for accessibility.",
      "Upload a new application version and deploy it to the environment.",
      "Configure auto-scaling rules and health checks under 'Configuration'.",
      "Set environment variables for different stages (dev, prod, etc.).",
      "Monitor application health and logs in the Beanstalk console."
    ],
    "cliCommands": [
      {
        "description": "Initialize the Elastic Beanstalk application.",
        "command": "eb init --platform python-3.9 --region us-east-1"
      },
      {
        "description": "Create a new environment with a t3.micro instance.",
        "command": "eb create dev-environment --instance_type t3.micro"
      },
      {
        "description": "Deploy the application to the environment.",
        "command": "eb deploy"
      },
      {
        "description": "Open the application in your browser.",
        "command": "eb open"
      },
      {
        "description": "Check the environment status.",
        "command": "eb status"
      },
      {
        "description": "Set environment variables for the application.",
        "command": "eb setenv ENV=dev API_KEY=yourkey"
      }
    ],
    "cleanup": [
      "Terminate Elastic Beanstalk environment: eb terminate or via console",
      "Delete application versions if no longer needed",
      "Remove associated S3 bucket for application versions",
      "Clean up CloudWatch log groups",
      "Verify no remaining EC2 instances or load balancers"
    ],
    "documentation": [
      {
        "title": "Elastic Beanstalk Developer Guide",
        "url": "https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/"
      },
      {
        "title": "EB CLI Reference",
        "url": "https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3.html"
      },
      {
        "title": "Beanstalk Deployment Strategies",
        "url": "https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.deploy-existing-version.html"
      }
    ]
  },
  {
    "id": "lab-011",
    "week": 11,
    "title": "CloudWatch Monitoring & Custom Metrics",
    "domain": "troubleshooting",
    "services": ["cloudwatch", "lambda", "sns"],
    "difficulty": "Intermediate",
    "estimatedTime": "3-4 hours",
    "description": "Implement comprehensive monitoring with CloudWatch metrics, alarms, and dashboards. Create custom metrics and automated alerting.",
    "costWarning": "CloudWatch costs: $0.30/metric/month, $0.10/alarm/month after free tier",
    "objectives": [
      "Create custom CloudWatch metrics in Lambda functions",
      "Build CloudWatch dashboards with multiple widgets",
      "Configure CloudWatch alarms with SNS notifications",
      "Implement log-based metrics and filters",
      "Set up composite alarms for complex scenarios",
      "Use CloudWatch Insights for log analysis",
      "Create automated responses to CloudWatch events"
    ],
    "theory": "CloudWatch provides monitoring and observability for AWS resources and applications. Custom metrics enable application-specific monitoring, while alarms provide automated responses to metric thresholds.",
    "prerequisites": [
      "Completed Lambda labs for metric generation",
      "Understanding of monitoring and alerting concepts",
      "Knowledge of statistical metrics (average, percentiles, etc.)",
      "Basic understanding of logging and log analysis"
    ],
    "consoleSteps": [
      "In the Lambda service, create a function that publishes custom metrics to CloudWatch using the Boto3 SDK.",
      "Generate application metrics such as response time and error count in your Lambda code.",
      "Open the CloudWatch service and create a new dashboard. Add widgets for your custom metrics.",
      "Set up CloudWatch alarms for error rates and latency thresholds.",
      "In the SNS service, create a topic for alarm notifications and subscribe your email.",
      "Configure the alarm to send notifications to the SNS topic.",
      "Create log-based metrics from Lambda logs using metric filters in CloudWatch Logs.",
      "Use CloudWatch Insights to query and analyze Lambda logs for trends and issues.",
      "Test alarm triggering by simulating errors and verify notification delivery."
    ],
    "cliCommands": [
      {
        "description": "Publish a custom metric data point to CloudWatch.",
        "command": "aws cloudwatch put-metric-data --namespace 'MyApp/Performance' --metric-data MetricName=ResponseTime,Value=245.0,Unit=Milliseconds,Dimensions=Name=Environment,Value=prod"
      },
      {
        "description": "Create a CloudWatch alarm for high error rate.",
        "command": "aws cloudwatch put-metric-alarm --alarm-name 'High-Error-Rate' --alarm-description 'Alarm when error rate exceeds 5%' --metric-name ErrorRate --namespace MyApp/Performance --statistic Average --period 300 --threshold 5.0 --comparison-operator GreaterThanThreshold --evaluation-periods 2"
      },
      {
        "description": "List all custom metrics in the namespace.",
        "command": "aws cloudwatch list-metrics --namespace MyApp/Performance"
      },
      {
        "description": "Get metric statistics for a specific time range.",
        "command": "aws cloudwatch get-metric-statistics --namespace MyApp/Performance --metric-name ResponseTime --start-time 2025-01-01T00:00:00Z --end-time 2025-01-01T23:59:59Z --period 3600 --statistics Average"
      },
      {
        "description": "Create a log-based metric filter (use console or CLI).",
        "command": "...existing code..."
      }
    ],
    "cleanup": [
      "Delete CloudWatch alarms: aws cloudwatch delete-alarms --alarm-names 'High-Error-Rate'",
      "Remove custom metrics (will expire automatically after 15 months)",
      "Delete CloudWatch dashboards via console",
      "Remove SNS topics and subscriptions",
      "Clean up Lambda functions and log groups"
    ],
    "documentation": [
      {
        "title": "CloudWatch User Guide",
        "url": "https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/"
      },
      {
        "title": "Custom Metrics",
        "url": "https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html"
      },
      {
        "title": "CloudWatch Insights",
        "url": "https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AnalyzingLogData.html"
      }
    ]
  },
  {
    "id": "lab-012",
    "week": 12,
    "title": "X-Ray Distributed Tracing",
    "domain": "troubleshooting",
    "services": ["x-ray", "lambda", "api-gateway"],
    "difficulty": "Advanced",
    "estimatedTime": "3-4 hours",
    "description": "Implement distributed tracing with AWS X-Ray. Trace requests across multiple services and analyze performance bottlenecks.",
    "costWarning": "X-Ray pricing: $5.00 per 1 million traces recorded, $0.50 per 1 million traces retrieved",
    "objectives": [
      "Enable X-Ray tracing for Lambda and API Gateway",
      "Implement X-Ray SDK in application code",
      "Create custom segments and subsegments",
      "Analyze service maps and trace details",
      "Set up sampling rules for cost optimization",
      "Implement annotations and metadata for filtering",
      "Debug performance issues using trace data"
    ],
    "theory": "X-Ray provides distributed tracing for microservices and serverless applications. It tracks requests across services, helping identify performance bottlenecks and errors in complex distributed systems.",
    "prerequisites": [
      "Completed API Gateway and Lambda labs",
      "Understanding of distributed systems concepts",
      "Knowledge of application performance monitoring",
      "Multi-service application architecture"
    ],
    "consoleSteps": [
      "In the Lambda console, select your function and enable X-Ray tracing under 'Monitoring and operations tools'.",
      "In API Gateway, select your API stage and enable X-Ray tracing in the stage settings.",
      "Add the AWS X-Ray SDK to your Lambda function code and instrument your code to create custom segments and subsegments.",
      "Deploy the updated Lambda function.",
      "Generate application traffic by invoking the API or Lambda function.",
      "Open the X-Ray console and analyze the service map and trace details.",
      "Create custom sampling rules to control trace volume and cost.",
      "Use trace search and filtering to debug performance issues."
    ],
    "cliCommands": [
      {
        "description": "Enable X-Ray tracing for a Lambda function.",
        "command": "aws lambda put-function-configuration --function-name MyFunction --tracing-config Mode=Active"
      },
      {
        "description": "Enable X-Ray tracing for an API Gateway stage (use console or CLI).",
        "command": "...existing code..."
      },
      {
        "description": "Get X-Ray service graph statistics for a time range.",
        "command": "aws xray get-service-graph --start-time 2025-01-01T00:00:00 --end-time 2025-01-01T23:59:59"
      },
      {
        "description": "Create a custom X-Ray sampling rule.",
        "command": "aws xray create-sampling-rule --sampling-rule file://sampling-rule.json"
      },
      {
        "description": "Get trace summaries for a specific time range.",
        "command": "aws xray get-trace-summaries --time-range-type TimeRangeByStartTime,StartTime=2025-01-01T00:00:00,EndTime=2025-01-01T23:59:59 --max-items 10"
      }
    ],
    "cleanup": [
      "Disable X-Ray tracing for Lambda functions",
      "Disable tracing for API Gateway stages",
      "Delete custom sampling rules if created",
      "Remove X-Ray SDK code from applications (optional)",
      "Note: X-Ray traces automatically expire after 30 days"
    ],
    "documentation": [
      {
        "title": "X-Ray Developer Guide",
        "url": "https://docs.aws.amazon.com/xray/latest/devguide/"
      },
      {
        "title": "X-Ray Lambda Integration",
        "url": "https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html"
      },
      {
        "title": "X-Ray SDK for Python",
        "url": "https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-python.html"
      }
    ]
  },
  {
    "id": "lab-013",
    "week": 13,
    "title": "SQS/SNS Messaging Patterns",
    "domain": "development",
    "services": ["sqs", "sns", "lambda"],
    "difficulty": "Intermediate",
    "estimatedTime": "3-4 hours",
    "description": "Implement decoupled messaging patterns with SQS and SNS. Build fan-out, queuing, and dead letter queue scenarios.",
    "costWarning": "Free Tier: 1M SQS requests, 1M SNS requests per month",
    "objectives": [
      "Create SQS standard and FIFO queues",
      "Implement SNS topics with multiple subscription types",
      "Configure Lambda triggers for SQS message processing",
      "Set up SNS fan-out pattern to multiple SQS queues",
      "Implement dead letter queues and error handling",
      "Configure message filtering and routing",
      "Optimize message processing and batch operations"
    ],
    "theory": "SQS provides reliable message queuing for decoupled applications, while SNS enables pub/sub messaging patterns. Together, they enable scalable, resilient messaging architectures.",
    "prerequisites": [
      "Completed Lambda fundamentals lab",
      "Understanding of messaging patterns and concepts",
      "Knowledge of asynchronous processing",
      "Basic JSON message format understanding"
    ],
    "consoleSteps": [
      "Open the SQS service in the AWS Console and create a new standard queue (e.g., 'order-processing-queue').",
      "Open the SNS service and create a new topic (e.g., 'order-notifications').",
      "Subscribe the SQS queue to the SNS topic by creating a new subscription with protocol 'SQS' and the queue ARN as the endpoint.",
      "In Lambda, create a function to process SQS messages and assign an IAM role with SQS permissions.",
      "Add the SQS queue as an event source trigger for the Lambda function.",
      "Create a dead letter queue (DLQ) in SQS and configure it for the main queue.",
      "Publish a test message to the SNS topic and verify it flows through SQS to Lambda.",
      "Implement message filtering in the SNS subscription (add filter policies as needed).",
      "Monitor SQS queue metrics and Lambda processing in CloudWatch."
    ],
    "cliCommands": [
      {
        "description": "Create a new SQS standard queue for order processing.",
        "command": "aws sqs create-queue --queue-name order-processing-queue --attributes VisibilityTimeoutSeconds=300,MessageRetentionPeriod=1209600"
      },
      {
        "description": "Create an SNS topic for order notifications.",
        "command": "aws sns create-topic --name order-notifications"
      },
      {
        "description": "Subscribe the SQS queue to the SNS topic.",
        "command": "aws sns subscribe --topic-arn arn:aws:sns:region:account:order-notifications --protocol sqs --notification-endpoint arn:aws:sqs:region:account:order-processing-queue"
      },
      {
        "description": "Send a test message to the SNS topic.",
        "command": "aws sns publish --topic-arn arn:aws:sns:region:account:order-notifications --message '{\"orderId\":\"12345\",\"customerId\":\"cust-001\",\"amount\":99.99}'"
      },
      {
        "description": "Receive messages from the SQS queue.",
        "command": "aws sqs receive-message --queue-url https://sqs.region.amazonaws.com/account/order-processing-queue --max-number-of-messages 10"
      },
      {
        "description": "Create a dead letter queue and configure it for the main queue (use console or CLI).",
        "command": "...existing code..."
      }
    ],
    "cleanup": [
      "Delete SQS queues: aws sqs delete-queue --queue-url <queue-url>",
      "Delete SNS topic: aws sns delete-topic --topic-arn <topic-arn>",
      "Remove Lambda functions and event source mappings",
      "Clean up IAM roles and policies",
      "Delete CloudWatch log groups"
    ],
    "documentation": [
      {
        "title": "SQS Developer Guide",
        "url": "https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/"
      },
      {
        "title": "SNS Developer Guide",
        "url": "https://docs.aws.amazon.com/sns/latest/dg/"
      },
      {
        "title": "Lambda SQS Integration",
        "url": "https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html"
      }
    ]
  },
  {
    "id": "lab-014",
    "week": 14,
    "title": "ECS Container Deployment",
    "domain": "deployment",
    "services": ["ecs", "ecr", "cloudwatch"],
    "difficulty": "Advanced",
    "estimatedTime": "4-5 hours",
    "description": "Deploy containerized applications with Amazon ECS. Learn container orchestration, service discovery, and auto-scaling.",
    "costWarning": "EC2 instances for ECS cluster will incur charges - use t3.micro when possible",
    "objectives": [
      "Create ECS cluster with EC2 or Fargate launch type",
      "Build and push Docker images to ECR",
      "Define ECS task definitions and services",
      "Configure service auto-scaling and load balancing",
      "Implement service discovery and networking",
      "Set up container logging and monitoring",
      "Deploy multi-container applications"
    ],
    "theory": "Amazon ECS orchestrates Docker containers with support for EC2 and Fargate launch types. ECR provides managed Docker registry, while ECS handles container scheduling, networking, and scaling.",
    "prerequisites": [
      "Docker fundamentals and container concepts",
      "Sample containerized application",
      "Docker CLI installed locally",
      "Understanding of microservices architecture"
    ],
    "consoleSteps": [
      "Open the ECR service in the AWS Console and create a new repository (e.g., 'my-app').",
      "Build your Docker image locally and tag it for your ECR repository.",
      "Authenticate Docker to ECR using the login command provided by AWS.",
      "Push the Docker image to the ECR repository.",
      "Open the ECS service and create a new cluster (choose Fargate for simplicity).",
      "Define a new ECS task definition specifying the container image, CPU, memory, and port mappings.",
      "Create an ECS service using the task definition, set the desired count, and configure networking (VPC, subnets, security groups).",
      "Set up an Application Load Balancer for the service and register the ECS service as a target.",
      "Enable CloudWatch logging for the container in the task definition.",
      "Deploy the service and test application accessibility and scaling."
    ],
    "cliCommands": [
      {
        "description": "Create a new ECR repository for your application images.",
        "command": "aws ecr create-repository --repository-name my-app"
      },
      {
        "description": "Authenticate Docker to ECR using the login password.",
        "command": "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin account.dkr.ecr.us-east-1.amazonaws.com"
      },
      {
        "description": "Build and tag your Docker image for ECR.",
        "command": "docker build -t my-app .\ndocker tag my-app:latest account.dkr.ecr.us-east-1.amazonaws.com/my-app:latest"
      },
      {
        "description": "Push the Docker image to ECR.",
        "command": "docker push account.dkr.ecr.us-east-1.amazonaws.com/my-app:latest"
      },
      {
        "description": "Create a new ECS cluster using Fargate.",
        "command": "aws ecs create-cluster --cluster-name my-cluster --capacity-providers FARGATE --default-capacity-provider-strategy capacityProvider=FARGATE,weight=1"
      },
      {
        "description": "Register a new ECS task definition (use JSON file or console).",
        "command": "...existing code..."
      },
      {
        "description": "Create an ECS service using the task definition.",
        "command": "aws ecs create-service --cluster my-cluster --service-name my-service --task-definition my-task-def --desired-count 1 --launch-type FARGATE --network-configuration 'awsvpcConfiguration={subnets=[subnet-xxxx],securityGroups=[sg-xxxx],assignPublicIp=ENABLED}'"
      }
    ],
    "cleanup": [
      "Delete ECS service: aws ecs delete-service --cluster my-cluster --service my-service --force",
      "Delete ECS cluster: aws ecs delete-cluster --cluster my-cluster",
      "Delete ECR repository: aws ecr delete-repository --repository-name my-app --force",
      "Remove task definitions and associated IAM roles",
      "Clean up Application Load Balancer and target groups"
    ],
    "documentation": [
      {
        "title": "ECS Developer Guide",
        "url": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/"
      },
      {
        "title": "ECR User Guide",
        "url": "https://docs.aws.amazon.com/AmazonECR/latest/userguide/"
      },
      {
        "title": "ECS Fargate User Guide",
        "url": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html"
      }
    ]
  },
  {
    "id": "lab-015",
    "week": 15,
    "title": "Performance Optimization & Cost Analysis",
    "domain": "troubleshooting",
    "services": ["lambda", "cloudwatch", "x-ray"],
    "difficulty": "Advanced",
    "estimatedTime": "3-4 hours",
    "description": "Comprehensive performance optimization across AWS services. Analyze costs, optimize resource usage, and implement monitoring best practices.",
    "costWarning": "Analysis tools included in free tier - focus on optimization techniques",
    "objectives": [
      "Analyze Lambda cold start performance and optimization",
      "Implement connection pooling and caching strategies",
      "Optimize memory allocation and execution time",
      "Use AWS Cost Explorer and Trusted Advisor",
      "Implement resource tagging for cost allocation",
      "Create performance benchmarks and comparison tests",
      "Develop cost optimization recommendations"
    ],
    "theory": "Performance optimization involves analyzing execution patterns, resource utilization, and costs to improve application efficiency. Key areas include memory optimization, connection management, caching, and proper resource sizing.",
    "prerequisites": [
      "Completed multiple labs across different services",
      "Understanding of performance metrics and analysis",
      "Knowledge of cost management concepts",
      "Experience with CloudWatch and X-Ray"
    ],
    "consoleSteps": [
      "In the Lambda console, review all existing functions for optimization opportunities (memory, timeout, environment variables).",
      "Open CloudWatch and analyze Lambda metrics such as duration, error rate, and concurrency.",
      "Use X-Ray to trace Lambda invocations and identify performance bottlenecks.",
      "Experiment with different memory allocations for Lambda functions and observe the impact on execution time and cost.",
      "Implement connection pooling and caching strategies in Lambda code for database calls.",
      "Set up resource tags for cost allocation across Lambda, S3, and other resources.",
      "Open AWS Cost Explorer and analyze spending patterns by service and tag.",
      "Document your findings and create a performance optimization recommendations report."
    ],
    "cliCommands": [
      {
        "description": "Update the memory configuration for a Lambda function.",
        "command": "aws lambda update-function-configuration --function-name MyFunction --memory-size 1024"
      },
      {
        "description": "Get Lambda function duration metrics from CloudWatch.",
        "command": "aws cloudwatch get-metric-statistics --namespace AWS/Lambda --metric-name Duration --dimensions Name=FunctionName,Value=MyFunction --start-time 2025-01-01T00:00:00Z --end-time 2025-01-01T23:59:59Z --period 3600 --statistics Average,Maximum"
      },
      {
        "description": "Tag Lambda resources for cost allocation.",
        "command": "aws resourcegroupstaggingapi tag-resources --resource-arn-list arn:aws:lambda:region:account:function:MyFunction --tags Environment=prod,Owner=team-a,Project=optimization"
      },
      {
        "description": "Get cost and usage data for a specific time period.",
        "command": "aws ce get-cost-and-usage --time-period Start=2025-01-01,End=2025-01-31 --granularity DAILY --metrics BlendedCost --group-by Type=DIMENSION,Key=SERVICE"
      },
      {
        "description": "List all Lambda functions and their configurations (for review).",
        "command": "aws lambda list-functions"
      }
    ],
    "cleanup": [
      "Revert any experimental configuration changes",
      "Document optimization findings and recommendations",
      "Keep optimized configurations that show improvement",
      "Maintain monitoring and alerting for performance metrics"
    ],
    "documentation": [
      {
        "title": "Lambda Performance Optimization",
        "url": "https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html"
      },
      {
        "title": "AWS Cost Management",
        "url": "https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/"
      },
      {
        "title": "Performance Monitoring with CloudWatch",
        "url": "https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html"
      }
    ]
  }
]
